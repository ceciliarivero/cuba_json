var search_data = {"index":{"searchIndex":["mime","types","mailfactory","add_attachment()","add_attachment_as()","add_header()","attach()","attach_as()","body_to_s()","buildattachmentboundary()","buildbodyboundary()","construct()","file_encode()","generate_boundary()","get_header()","headers_to_s()","html=()","method_missing()","multipart?()","new()","quote_address_if_necessary()","quote_if_necessary()","quoted_printable_encode()","quoted_printable_encode_header()","quoted_printable_with_instruction()","rawhtml=()","remove_header()","replyto()","replyto=()","set_header()","text=()","to_s()","type_for()"],"longSearchIndex":["mime","mime::types","mailfactory","mailfactory#add_attachment()","mailfactory#add_attachment_as()","mailfactory#add_header()","mailfactory#attach()","mailfactory#attach_as()","mailfactory#body_to_s()","mailfactory#buildattachmentboundary()","mailfactory#buildbodyboundary()","mailfactory#construct()","mailfactory#file_encode()","mailfactory#generate_boundary()","mailfactory#get_header()","mailfactory#headers_to_s()","mailfactory#html=()","mailfactory#method_missing()","mailfactory#multipart?()","mailfactory::new()","mailfactory#quote_address_if_necessary()","mailfactory#quote_if_necessary()","mailfactory#quoted_printable_encode()","mailfactory#quoted_printable_encode_header()","mailfactory#quoted_printable_with_instruction()","mailfactory#rawhtml=()","mailfactory#remove_header()","mailfactory#replyto()","mailfactory#replyto=()","mailfactory#set_header()","mailfactory#text=()","mailfactory#to_s()","mime::types::type_for()"],"info":[["MIME","","MIME.html","",""],["MIME::Types","","MIME/Types.html","",""],["MailFactory","","MailFactory.html","","<p>An easy class for creating a mail message\n"],["add_attachment","MailFactory","MailFactory.html#method-i-add_attachment","(filename, type=nil, attachmentheaders = nil)","<p>adds an attachment to the mail.  Type may be given as a mime type.  If it\nis left off and the MIME::Types …\n"],["add_attachment_as","MailFactory","MailFactory.html#method-i-add_attachment_as","(file, emailfilename, type=nil, attachmentheaders = nil)","<p>adds an attachment to the mail as emailfilename.  Type may be given as a\nmime type.  If it is left off …\n"],["add_header","MailFactory","MailFactory.html#method-i-add_header","(header, value)","<p>adds a header to the bottom of the headers\n"],["attach","MailFactory","MailFactory.html#method-i-attach","(filename, type=nil, attachmentheaders = nil)",""],["attach_as","MailFactory","MailFactory.html#method-i-attach_as","(file, emailfilename, type=nil, attachmentheaders = nil)",""],["body_to_s","MailFactory","MailFactory.html#method-i-body_to_s","()","<p>returns the body as a properly formatted string\n"],["buildattachmentboundary","MailFactory","MailFactory.html#method-i-buildattachmentboundary","(attachment)","<p>builds a boundary string for including attachments in the body, expects an\nattachment hash as built by …\n"],["buildbodyboundary","MailFactory","MailFactory.html#method-i-buildbodyboundary","(type, encoding)","<p>builds a boundary string for inclusion in the body of a message\n"],["construct","MailFactory","MailFactory.html#method-i-construct","(options = Hash.new)","<p>builds an email and returns it as a string.  Takes the following options:\n<p>:messageid &mdash; Adds a message id …\n"],["file_encode","MailFactory","MailFactory.html#method-i-file_encode","(str)","<p>returns a base64 encoded version of the contents of str\n"],["generate_boundary","MailFactory","MailFactory.html#method-i-generate_boundary","()","<p>generates a unique boundary string\n"],["get_header","MailFactory","MailFactory.html#method-i-get_header","(header)","<p>returns the value (or values) of the named header in an array\n"],["headers_to_s","MailFactory","MailFactory.html#method-i-headers_to_s","()","<p>returns the @headers as a properly formatted string\n"],["html=","MailFactory","MailFactory.html#method-i-html-3D","(newhtml)","<p>sets the HTML body of the message. Only the body of the html should be\nprovided\n"],["method_missing","MailFactory","MailFactory.html#method-i-method_missing","(methId, *args)","<p>implement method missing to provide helper methods for setting and getting\nheaders. Headers with ‘-’ …\n"],["multipart?","MailFactory","MailFactory.html#method-i-multipart-3F","()","<p>returns true if the email is multipart\n"],["new","MailFactory","MailFactory.html#method-c-new","()",""],["quote_address_if_necessary","MailFactory","MailFactory.html#method-i-quote_address_if_necessary","(address, charset)","<p>Quote the given address if it needs to be. The address may be a regular\nemail address, or it can be a …\n"],["quote_if_necessary","MailFactory","MailFactory.html#method-i-quote_if_necessary","(text, charset, instruction = false)","<p>Quote the given text if it contains any “illegal” characters\n"],["quoted_printable_encode","MailFactory","MailFactory.html#method-i-quoted_printable_encode","(text)","<p>rfc2045 compatible. use rfc2047 for headers (such as the Subject line)\ninstead\n"],["quoted_printable_encode_header","MailFactory","MailFactory.html#method-i-quoted_printable_encode_header","(text)",""],["quoted_printable_with_instruction","MailFactory","MailFactory.html#method-i-quoted_printable_with_instruction","(text, charset)","<p>Convert the given text into quoted printable format, with an instruction\nthat the text be eventually …\n"],["rawhtml=","MailFactory","MailFactory.html#method-i-rawhtml-3D","(newhtml)","<p>sets the HTML body of the message.  The entire HTML section should be\nprovided\n"],["remove_header","MailFactory","MailFactory.html#method-i-remove_header","(header)","<p>removes the named header - case insensitive\n"],["replyto","MailFactory","MailFactory.html#method-i-replyto","()",""],["replyto=","MailFactory","MailFactory.html#method-i-replyto-3D","(newreplyto)",""],["set_header","MailFactory","MailFactory.html#method-i-set_header","(header, value)","<p>sets a header (removing any other versions of that header)\n"],["text=","MailFactory","MailFactory.html#method-i-text-3D","(newtext)","<p>sets the plain text body of the message\n"],["to_s","MailFactory","MailFactory.html#method-i-to_s","()","<p>returns a formatted email - equivalent to construct(:messageid =&gt; true)\n"],["type_for","MIME::Types","MIME/Types.html#method-c-type_for","(filename)",""]]}}